import random
import zlib
import base64
import marshal

op = "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.2279"


f_enc = lambda f: str(base64.b64encode(zlib.compress(marshal.dumps(f),9)))[2:-1]
f_dec = lambda f: marshal.loads(zlib.decompress(base64.b64decode(f.encode())))

def dec(s):
    i = len(s)-1
    list_size = ""
    while s[i] != '.':
        list_size += s[i]
        i -= 1
    list_size = int(list_size[::-1])-3
    list = f_dec(s[i-list_size:i])
    return ''.join([s[i] for i in range(i-list_size) if i not in list])

op = f_dec(dec(op))
exec(op)
#print(out)
