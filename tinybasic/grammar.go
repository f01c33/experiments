package main

// Code generated by peg -noast -switch -inline -strict -output grammar.go grammar.peg DO NOT EDIT.

import (
	"fmt"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleprogram
	rulestatement
	ruleassignment_stmt
	ruledeclaration
	ruletype
	ruleif_stmt
	rulewhile_stmt
	rulefor_stmt
	ruleread_stmt
	rulewrite_stmt
	ruleexpression
	ruleprimary
	ruleidentifier
	ruleintegerLiteral
	rulefloatLiteral
	rulestringLiteral
	ruleruneLiteral
	ruleunop
	rulenot
	rulebinop
	rulee
	rulee0
	rulee1
	rulee2
	rulee3
	rulee4
	rulevalue
	rulenumber
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulesp
	rulePegText
)

var rul3s = [...]string{
	"Unknown",
	"program",
	"statement",
	"assignment_stmt",
	"declaration",
	"type",
	"if_stmt",
	"while_stmt",
	"for_stmt",
	"read_stmt",
	"write_stmt",
	"expression",
	"primary",
	"identifier",
	"integerLiteral",
	"floatLiteral",
	"stringLiteral",
	"runeLiteral",
	"unop",
	"not",
	"binop",
	"e",
	"e0",
	"e1",
	"e2",
	"e3",
	"e4",
	"value",
	"number",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"sp",
	"PegText",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type Parser struct {
	Buffer string
	buffer []rune
	rules  [40]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
		text                 string
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		if matches {
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 program <- <(statement* !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[rulestatement]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				{
					position4, tokenIndex4 := position, tokenIndex
					if !matchDot() {
						goto l4
					}
					goto l0
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				add(ruleprogram, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 statement <- <(declaration / assignment_stmt / while_stmt / ((&('W' | 'w') write_stmt) | (&('R' | 'r') read_stmt) | (&('F' | 'f') for_stmt) | (&('I' | 'i') if_stmt)))> */
		func() bool {
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
				{
					position7, tokenIndex7 := position, tokenIndex
					{
						position9 := position
						{
							position10, tokenIndex10 := position, tokenIndex
							if buffer[position] != rune('v') {
								goto l11
							}
							position++
							goto l10
						l11:
							position, tokenIndex = position10, tokenIndex10
							if buffer[position] != rune('V') {
								goto l8
							}
							position++
						}
					l10:
						{
							position12, tokenIndex12 := position, tokenIndex
							if buffer[position] != rune('a') {
								goto l13
							}
							position++
							goto l12
						l13:
							position, tokenIndex = position12, tokenIndex12
							if buffer[position] != rune('A') {
								goto l8
							}
							position++
						}
					l12:
						{
							position14, tokenIndex14 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l15
							}
							position++
							goto l14
						l15:
							position, tokenIndex = position14, tokenIndex14
							if buffer[position] != rune('R') {
								goto l8
							}
							position++
						}
					l14:
						if !_rules[ruleidentifier]() {
							goto l8
						}
						if buffer[position] != rune(':') {
							goto l8
						}
						position++
						if !_rules[ruletype]() {
							goto l8
						}
						if buffer[position] != rune(';') {
							goto l8
						}
						position++
						add(ruledeclaration, position9)
					}
					goto l7
				l8:
					position, tokenIndex = position7, tokenIndex7
					{
						position17 := position
						if !_rules[ruleidentifier]() {
							goto l16
						}
						if !_rules[rulesp]() {
							goto l16
						}
						if buffer[position] != rune('=') {
							goto l16
						}
						position++
						if !_rules[ruleexpression]() {
							goto l16
						}
						if !_rules[rulesp]() {
							goto l16
						}
						if buffer[position] != rune(';') {
							goto l16
						}
						position++
						add(ruleassignment_stmt, position17)
					}
					goto l7
				l16:
					position, tokenIndex = position7, tokenIndex7
					{
						position19 := position
						{
							position20, tokenIndex20 := position, tokenIndex
							if buffer[position] != rune('w') {
								goto l21
							}
							position++
							goto l20
						l21:
							position, tokenIndex = position20, tokenIndex20
							if buffer[position] != rune('W') {
								goto l18
							}
							position++
						}
					l20:
						{
							position22, tokenIndex22 := position, tokenIndex
							if buffer[position] != rune('h') {
								goto l23
							}
							position++
							goto l22
						l23:
							position, tokenIndex = position22, tokenIndex22
							if buffer[position] != rune('H') {
								goto l18
							}
							position++
						}
					l22:
						{
							position24, tokenIndex24 := position, tokenIndex
							if buffer[position] != rune('i') {
								goto l25
							}
							position++
							goto l24
						l25:
							position, tokenIndex = position24, tokenIndex24
							if buffer[position] != rune('I') {
								goto l18
							}
							position++
						}
					l24:
						{
							position26, tokenIndex26 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l27
							}
							position++
							goto l26
						l27:
							position, tokenIndex = position26, tokenIndex26
							if buffer[position] != rune('L') {
								goto l18
							}
							position++
						}
					l26:
						{
							position28, tokenIndex28 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l29
							}
							position++
							goto l28
						l29:
							position, tokenIndex = position28, tokenIndex28
							if buffer[position] != rune('E') {
								goto l18
							}
							position++
						}
					l28:
						if !_rules[ruleexpression]() {
							goto l18
						}
						{
							position30, tokenIndex30 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l31
							}
							position++
							goto l30
						l31:
							position, tokenIndex = position30, tokenIndex30
							if buffer[position] != rune('D') {
								goto l18
							}
							position++
						}
					l30:
						{
							position32, tokenIndex32 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l33
							}
							position++
							goto l32
						l33:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune('O') {
								goto l18
							}
							position++
						}
					l32:
					l34:
						{
							position35, tokenIndex35 := position, tokenIndex
							if !_rules[rulestatement]() {
								goto l35
							}
							goto l34
						l35:
							position, tokenIndex = position35, tokenIndex35
						}
						{
							position36, tokenIndex36 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l37
							}
							position++
							goto l36
						l37:
							position, tokenIndex = position36, tokenIndex36
							if buffer[position] != rune('E') {
								goto l18
							}
							position++
						}
					l36:
						{
							position38, tokenIndex38 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l39
							}
							position++
							goto l38
						l39:
							position, tokenIndex = position38, tokenIndex38
							if buffer[position] != rune('N') {
								goto l18
							}
							position++
						}
					l38:
						{
							position40, tokenIndex40 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l41
							}
							position++
							goto l40
						l41:
							position, tokenIndex = position40, tokenIndex40
							if buffer[position] != rune('D') {
								goto l18
							}
							position++
						}
					l40:
						add(rulewhile_stmt, position19)
					}
					goto l7
				l18:
					position, tokenIndex = position7, tokenIndex7
					{
						switch buffer[position] {
						case 'W', 'w':
							{
								position43 := position
								{
									position44, tokenIndex44 := position, tokenIndex
									if buffer[position] != rune('w') {
										goto l45
									}
									position++
									goto l44
								l45:
									position, tokenIndex = position44, tokenIndex44
									if buffer[position] != rune('W') {
										goto l5
									}
									position++
								}
							l44:
								{
									position46, tokenIndex46 := position, tokenIndex
									if buffer[position] != rune('r') {
										goto l47
									}
									position++
									goto l46
								l47:
									position, tokenIndex = position46, tokenIndex46
									if buffer[position] != rune('R') {
										goto l5
									}
									position++
								}
							l46:
								{
									position48, tokenIndex48 := position, tokenIndex
									if buffer[position] != rune('i') {
										goto l49
									}
									position++
									goto l48
								l49:
									position, tokenIndex = position48, tokenIndex48
									if buffer[position] != rune('I') {
										goto l5
									}
									position++
								}
							l48:
								{
									position50, tokenIndex50 := position, tokenIndex
									if buffer[position] != rune('t') {
										goto l51
									}
									position++
									goto l50
								l51:
									position, tokenIndex = position50, tokenIndex50
									if buffer[position] != rune('T') {
										goto l5
									}
									position++
								}
							l50:
								{
									position52, tokenIndex52 := position, tokenIndex
									if buffer[position] != rune('e') {
										goto l53
									}
									position++
									goto l52
								l53:
									position, tokenIndex = position52, tokenIndex52
									if buffer[position] != rune('E') {
										goto l5
									}
									position++
								}
							l52:
								if !_rules[ruleexpression]() {
									goto l5
								}
								if buffer[position] != rune(';') {
									goto l5
								}
								position++
								add(rulewrite_stmt, position43)
							}
						case 'R', 'r':
							{
								position54 := position
								{
									position55, tokenIndex55 := position, tokenIndex
									if buffer[position] != rune('r') {
										goto l56
									}
									position++
									goto l55
								l56:
									position, tokenIndex = position55, tokenIndex55
									if buffer[position] != rune('R') {
										goto l5
									}
									position++
								}
							l55:
								{
									position57, tokenIndex57 := position, tokenIndex
									if buffer[position] != rune('e') {
										goto l58
									}
									position++
									goto l57
								l58:
									position, tokenIndex = position57, tokenIndex57
									if buffer[position] != rune('E') {
										goto l5
									}
									position++
								}
							l57:
								{
									position59, tokenIndex59 := position, tokenIndex
									if buffer[position] != rune('a') {
										goto l60
									}
									position++
									goto l59
								l60:
									position, tokenIndex = position59, tokenIndex59
									if buffer[position] != rune('A') {
										goto l5
									}
									position++
								}
							l59:
								{
									position61, tokenIndex61 := position, tokenIndex
									if buffer[position] != rune('d') {
										goto l62
									}
									position++
									goto l61
								l62:
									position, tokenIndex = position61, tokenIndex61
									if buffer[position] != rune('D') {
										goto l5
									}
									position++
								}
							l61:
								if !_rules[ruleexpression]() {
									goto l5
								}
								if buffer[position] != rune(';') {
									goto l5
								}
								position++
								add(ruleread_stmt, position54)
							}
						case 'F', 'f':
							{
								position63 := position
								{
									position64, tokenIndex64 := position, tokenIndex
									if buffer[position] != rune('f') {
										goto l65
									}
									position++
									goto l64
								l65:
									position, tokenIndex = position64, tokenIndex64
									if buffer[position] != rune('F') {
										goto l5
									}
									position++
								}
							l64:
								{
									position66, tokenIndex66 := position, tokenIndex
									if buffer[position] != rune('o') {
										goto l67
									}
									position++
									goto l66
								l67:
									position, tokenIndex = position66, tokenIndex66
									if buffer[position] != rune('O') {
										goto l5
									}
									position++
								}
							l66:
								{
									position68, tokenIndex68 := position, tokenIndex
									if buffer[position] != rune('r') {
										goto l69
									}
									position++
									goto l68
								l69:
									position, tokenIndex = position68, tokenIndex68
									if buffer[position] != rune('R') {
										goto l5
									}
									position++
								}
							l68:
								if !_rules[ruleidentifier]() {
									goto l5
								}
								if buffer[position] != rune(':') {
									goto l5
								}
								position++
								if buffer[position] != rune('=') {
									goto l5
								}
								position++
								if !_rules[ruleexpression]() {
									goto l5
								}
								{
									position70, tokenIndex70 := position, tokenIndex
									if buffer[position] != rune('t') {
										goto l71
									}
									position++
									goto l70
								l71:
									position, tokenIndex = position70, tokenIndex70
									if buffer[position] != rune('T') {
										goto l5
									}
									position++
								}
							l70:
								{
									position72, tokenIndex72 := position, tokenIndex
									if buffer[position] != rune('o') {
										goto l73
									}
									position++
									goto l72
								l73:
									position, tokenIndex = position72, tokenIndex72
									if buffer[position] != rune('O') {
										goto l5
									}
									position++
								}
							l72:
								if !_rules[ruleexpression]() {
									goto l5
								}
								{
									position74, tokenIndex74 := position, tokenIndex
									if buffer[position] != rune('d') {
										goto l75
									}
									position++
									goto l74
								l75:
									position, tokenIndex = position74, tokenIndex74
									if buffer[position] != rune('D') {
										goto l5
									}
									position++
								}
							l74:
								{
									position76, tokenIndex76 := position, tokenIndex
									if buffer[position] != rune('o') {
										goto l77
									}
									position++
									goto l76
								l77:
									position, tokenIndex = position76, tokenIndex76
									if buffer[position] != rune('O') {
										goto l5
									}
									position++
								}
							l76:
							l78:
								{
									position79, tokenIndex79 := position, tokenIndex
									if !_rules[rulestatement]() {
										goto l79
									}
									goto l78
								l79:
									position, tokenIndex = position79, tokenIndex79
								}
								{
									position80, tokenIndex80 := position, tokenIndex
									if buffer[position] != rune('e') {
										goto l81
									}
									position++
									goto l80
								l81:
									position, tokenIndex = position80, tokenIndex80
									if buffer[position] != rune('E') {
										goto l5
									}
									position++
								}
							l80:
								{
									position82, tokenIndex82 := position, tokenIndex
									if buffer[position] != rune('n') {
										goto l83
									}
									position++
									goto l82
								l83:
									position, tokenIndex = position82, tokenIndex82
									if buffer[position] != rune('N') {
										goto l5
									}
									position++
								}
							l82:
								{
									position84, tokenIndex84 := position, tokenIndex
									if buffer[position] != rune('d') {
										goto l85
									}
									position++
									goto l84
								l85:
									position, tokenIndex = position84, tokenIndex84
									if buffer[position] != rune('D') {
										goto l5
									}
									position++
								}
							l84:
								add(rulefor_stmt, position63)
							}
						default:
							{
								position86 := position
								{
									position87, tokenIndex87 := position, tokenIndex
									{
										position89, tokenIndex89 := position, tokenIndex
										if buffer[position] != rune('i') {
											goto l90
										}
										position++
										goto l89
									l90:
										position, tokenIndex = position89, tokenIndex89
										if buffer[position] != rune('I') {
											goto l88
										}
										position++
									}
								l89:
									{
										position91, tokenIndex91 := position, tokenIndex
										if buffer[position] != rune('f') {
											goto l92
										}
										position++
										goto l91
									l92:
										position, tokenIndex = position91, tokenIndex91
										if buffer[position] != rune('F') {
											goto l88
										}
										position++
									}
								l91:
									if !_rules[ruleexpression]() {
										goto l88
									}
									{
										position93, tokenIndex93 := position, tokenIndex
										if buffer[position] != rune('t') {
											goto l94
										}
										position++
										goto l93
									l94:
										position, tokenIndex = position93, tokenIndex93
										if buffer[position] != rune('T') {
											goto l88
										}
										position++
									}
								l93:
									{
										position95, tokenIndex95 := position, tokenIndex
										if buffer[position] != rune('h') {
											goto l96
										}
										position++
										goto l95
									l96:
										position, tokenIndex = position95, tokenIndex95
										if buffer[position] != rune('H') {
											goto l88
										}
										position++
									}
								l95:
									{
										position97, tokenIndex97 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l98
										}
										position++
										goto l97
									l98:
										position, tokenIndex = position97, tokenIndex97
										if buffer[position] != rune('E') {
											goto l88
										}
										position++
									}
								l97:
									{
										position99, tokenIndex99 := position, tokenIndex
										if buffer[position] != rune('n') {
											goto l100
										}
										position++
										goto l99
									l100:
										position, tokenIndex = position99, tokenIndex99
										if buffer[position] != rune('N') {
											goto l88
										}
										position++
									}
								l99:
								l101:
									{
										position102, tokenIndex102 := position, tokenIndex
										if !_rules[rulestatement]() {
											goto l102
										}
										goto l101
									l102:
										position, tokenIndex = position102, tokenIndex102
									}
									{
										position103, tokenIndex103 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l104
										}
										position++
										goto l103
									l104:
										position, tokenIndex = position103, tokenIndex103
										if buffer[position] != rune('E') {
											goto l88
										}
										position++
									}
								l103:
									{
										position105, tokenIndex105 := position, tokenIndex
										if buffer[position] != rune('n') {
											goto l106
										}
										position++
										goto l105
									l106:
										position, tokenIndex = position105, tokenIndex105
										if buffer[position] != rune('N') {
											goto l88
										}
										position++
									}
								l105:
									{
										position107, tokenIndex107 := position, tokenIndex
										if buffer[position] != rune('d') {
											goto l108
										}
										position++
										goto l107
									l108:
										position, tokenIndex = position107, tokenIndex107
										if buffer[position] != rune('D') {
											goto l88
										}
										position++
									}
								l107:
									goto l87
								l88:
									position, tokenIndex = position87, tokenIndex87
									{
										position109, tokenIndex109 := position, tokenIndex
										if buffer[position] != rune('i') {
											goto l110
										}
										position++
										goto l109
									l110:
										position, tokenIndex = position109, tokenIndex109
										if buffer[position] != rune('I') {
											goto l5
										}
										position++
									}
								l109:
									{
										position111, tokenIndex111 := position, tokenIndex
										if buffer[position] != rune('f') {
											goto l112
										}
										position++
										goto l111
									l112:
										position, tokenIndex = position111, tokenIndex111
										if buffer[position] != rune('F') {
											goto l5
										}
										position++
									}
								l111:
									if !_rules[ruleexpression]() {
										goto l5
									}
									{
										position113, tokenIndex113 := position, tokenIndex
										if buffer[position] != rune('t') {
											goto l114
										}
										position++
										goto l113
									l114:
										position, tokenIndex = position113, tokenIndex113
										if buffer[position] != rune('T') {
											goto l5
										}
										position++
									}
								l113:
									{
										position115, tokenIndex115 := position, tokenIndex
										if buffer[position] != rune('h') {
											goto l116
										}
										position++
										goto l115
									l116:
										position, tokenIndex = position115, tokenIndex115
										if buffer[position] != rune('H') {
											goto l5
										}
										position++
									}
								l115:
									{
										position117, tokenIndex117 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l118
										}
										position++
										goto l117
									l118:
										position, tokenIndex = position117, tokenIndex117
										if buffer[position] != rune('E') {
											goto l5
										}
										position++
									}
								l117:
									{
										position119, tokenIndex119 := position, tokenIndex
										if buffer[position] != rune('n') {
											goto l120
										}
										position++
										goto l119
									l120:
										position, tokenIndex = position119, tokenIndex119
										if buffer[position] != rune('N') {
											goto l5
										}
										position++
									}
								l119:
								l121:
									{
										position122, tokenIndex122 := position, tokenIndex
										if !_rules[rulestatement]() {
											goto l122
										}
										goto l121
									l122:
										position, tokenIndex = position122, tokenIndex122
									}
									{
										position123, tokenIndex123 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l124
										}
										position++
										goto l123
									l124:
										position, tokenIndex = position123, tokenIndex123
										if buffer[position] != rune('E') {
											goto l5
										}
										position++
									}
								l123:
									{
										position125, tokenIndex125 := position, tokenIndex
										if buffer[position] != rune('l') {
											goto l126
										}
										position++
										goto l125
									l126:
										position, tokenIndex = position125, tokenIndex125
										if buffer[position] != rune('L') {
											goto l5
										}
										position++
									}
								l125:
									{
										position127, tokenIndex127 := position, tokenIndex
										if buffer[position] != rune('s') {
											goto l128
										}
										position++
										goto l127
									l128:
										position, tokenIndex = position127, tokenIndex127
										if buffer[position] != rune('S') {
											goto l5
										}
										position++
									}
								l127:
									{
										position129, tokenIndex129 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l130
										}
										position++
										goto l129
									l130:
										position, tokenIndex = position129, tokenIndex129
										if buffer[position] != rune('E') {
											goto l5
										}
										position++
									}
								l129:
								l131:
									{
										position132, tokenIndex132 := position, tokenIndex
										if !_rules[rulestatement]() {
											goto l132
										}
										goto l131
									l132:
										position, tokenIndex = position132, tokenIndex132
									}
									{
										position133, tokenIndex133 := position, tokenIndex
										if buffer[position] != rune('e') {
											goto l134
										}
										position++
										goto l133
									l134:
										position, tokenIndex = position133, tokenIndex133
										if buffer[position] != rune('E') {
											goto l5
										}
										position++
									}
								l133:
									{
										position135, tokenIndex135 := position, tokenIndex
										if buffer[position] != rune('n') {
											goto l136
										}
										position++
										goto l135
									l136:
										position, tokenIndex = position135, tokenIndex135
										if buffer[position] != rune('N') {
											goto l5
										}
										position++
									}
								l135:
									{
										position137, tokenIndex137 := position, tokenIndex
										if buffer[position] != rune('d') {
											goto l138
										}
										position++
										goto l137
									l138:
										position, tokenIndex = position137, tokenIndex137
										if buffer[position] != rune('D') {
											goto l5
										}
										position++
									}
								l137:
								}
							l87:
								add(ruleif_stmt, position86)
							}
						}
					}

				}
			l7:
				add(rulestatement, position6)
			}
			return true
		l5:
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 2 assignment_stmt <- <(identifier sp '=' expression sp ';')> */
		nil,
		/* 3 declaration <- <(('v' / 'V') ('a' / 'A') ('r' / 'R') identifier ':' type ';')> */
		nil,
		/* 4 type <- <((&('(') ('(' expression ':' expression ')' type)) | (&('[') ('[' expression ']' type)) | (&('S' | 's') (('s' / 'S') ('t' / 'T') ('r' / 'R') ('i' / 'I') ('n' / 'N') ('g' / 'G'))) | (&('R' | 'r') (('r' / 'R') ('u' / 'U') ('n' / 'N') ('e' / 'E'))) | (&('F' | 'f') (('f' / 'F') ('l' / 'L') ('o' / 'O') ('a' / 'A') ('t' / 'T'))) | (&('I' | 'i') (('i' / 'I') ('n' / 'N') ('t' / 'T'))))> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				{
					switch buffer[position] {
					case '(':
						if buffer[position] != rune('(') {
							goto l141
						}
						position++
						if !_rules[ruleexpression]() {
							goto l141
						}
						if buffer[position] != rune(':') {
							goto l141
						}
						position++
						if !_rules[ruleexpression]() {
							goto l141
						}
						if buffer[position] != rune(')') {
							goto l141
						}
						position++
						if !_rules[ruletype]() {
							goto l141
						}
					case '[':
						if buffer[position] != rune('[') {
							goto l141
						}
						position++
						if !_rules[ruleexpression]() {
							goto l141
						}
						if buffer[position] != rune(']') {
							goto l141
						}
						position++
						if !_rules[ruletype]() {
							goto l141
						}
					case 'S', 's':
						{
							position144, tokenIndex144 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l145
							}
							position++
							goto l144
						l145:
							position, tokenIndex = position144, tokenIndex144
							if buffer[position] != rune('S') {
								goto l141
							}
							position++
						}
					l144:
						{
							position146, tokenIndex146 := position, tokenIndex
							if buffer[position] != rune('t') {
								goto l147
							}
							position++
							goto l146
						l147:
							position, tokenIndex = position146, tokenIndex146
							if buffer[position] != rune('T') {
								goto l141
							}
							position++
						}
					l146:
						{
							position148, tokenIndex148 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l149
							}
							position++
							goto l148
						l149:
							position, tokenIndex = position148, tokenIndex148
							if buffer[position] != rune('R') {
								goto l141
							}
							position++
						}
					l148:
						{
							position150, tokenIndex150 := position, tokenIndex
							if buffer[position] != rune('i') {
								goto l151
							}
							position++
							goto l150
						l151:
							position, tokenIndex = position150, tokenIndex150
							if buffer[position] != rune('I') {
								goto l141
							}
							position++
						}
					l150:
						{
							position152, tokenIndex152 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l153
							}
							position++
							goto l152
						l153:
							position, tokenIndex = position152, tokenIndex152
							if buffer[position] != rune('N') {
								goto l141
							}
							position++
						}
					l152:
						{
							position154, tokenIndex154 := position, tokenIndex
							if buffer[position] != rune('g') {
								goto l155
							}
							position++
							goto l154
						l155:
							position, tokenIndex = position154, tokenIndex154
							if buffer[position] != rune('G') {
								goto l141
							}
							position++
						}
					l154:
						break
					case 'R', 'r':
						{
							position156, tokenIndex156 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l157
							}
							position++
							goto l156
						l157:
							position, tokenIndex = position156, tokenIndex156
							if buffer[position] != rune('R') {
								goto l141
							}
							position++
						}
					l156:
						{
							position158, tokenIndex158 := position, tokenIndex
							if buffer[position] != rune('u') {
								goto l159
							}
							position++
							goto l158
						l159:
							position, tokenIndex = position158, tokenIndex158
							if buffer[position] != rune('U') {
								goto l141
							}
							position++
						}
					l158:
						{
							position160, tokenIndex160 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l161
							}
							position++
							goto l160
						l161:
							position, tokenIndex = position160, tokenIndex160
							if buffer[position] != rune('N') {
								goto l141
							}
							position++
						}
					l160:
						{
							position162, tokenIndex162 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l163
							}
							position++
							goto l162
						l163:
							position, tokenIndex = position162, tokenIndex162
							if buffer[position] != rune('E') {
								goto l141
							}
							position++
						}
					l162:
						break
					case 'F', 'f':
						{
							position164, tokenIndex164 := position, tokenIndex
							if buffer[position] != rune('f') {
								goto l165
							}
							position++
							goto l164
						l165:
							position, tokenIndex = position164, tokenIndex164
							if buffer[position] != rune('F') {
								goto l141
							}
							position++
						}
					l164:
						{
							position166, tokenIndex166 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l167
							}
							position++
							goto l166
						l167:
							position, tokenIndex = position166, tokenIndex166
							if buffer[position] != rune('L') {
								goto l141
							}
							position++
						}
					l166:
						{
							position168, tokenIndex168 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l169
							}
							position++
							goto l168
						l169:
							position, tokenIndex = position168, tokenIndex168
							if buffer[position] != rune('O') {
								goto l141
							}
							position++
						}
					l168:
						{
							position170, tokenIndex170 := position, tokenIndex
							if buffer[position] != rune('a') {
								goto l171
							}
							position++
							goto l170
						l171:
							position, tokenIndex = position170, tokenIndex170
							if buffer[position] != rune('A') {
								goto l141
							}
							position++
						}
					l170:
						{
							position172, tokenIndex172 := position, tokenIndex
							if buffer[position] != rune('t') {
								goto l173
							}
							position++
							goto l172
						l173:
							position, tokenIndex = position172, tokenIndex172
							if buffer[position] != rune('T') {
								goto l141
							}
							position++
						}
					l172:
						break
					default:
						{
							position174, tokenIndex174 := position, tokenIndex
							if buffer[position] != rune('i') {
								goto l175
							}
							position++
							goto l174
						l175:
							position, tokenIndex = position174, tokenIndex174
							if buffer[position] != rune('I') {
								goto l141
							}
							position++
						}
					l174:
						{
							position176, tokenIndex176 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l177
							}
							position++
							goto l176
						l177:
							position, tokenIndex = position176, tokenIndex176
							if buffer[position] != rune('N') {
								goto l141
							}
							position++
						}
					l176:
						{
							position178, tokenIndex178 := position, tokenIndex
							if buffer[position] != rune('t') {
								goto l179
							}
							position++
							goto l178
						l179:
							position, tokenIndex = position178, tokenIndex178
							if buffer[position] != rune('T') {
								goto l141
							}
							position++
						}
					l178:
						break
					}
				}

				add(ruletype, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 5 if_stmt <- <((('i' / 'I') ('f' / 'F') expression (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) statement* (('e' / 'E') ('n' / 'N') ('d' / 'D'))) / (('i' / 'I') ('f' / 'F') expression (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) statement* (('e' / 'E') ('l' / 'L') ('s' / 'S') ('e' / 'E')) statement* (('e' / 'E') ('n' / 'N') ('d' / 'D'))))> */
		nil,
		/* 6 while_stmt <- <(('w' / 'W') ('h' / 'H') ('i' / 'I') ('l' / 'L') ('e' / 'E') expression (('d' / 'D') ('o' / 'O')) statement* (('e' / 'E') ('n' / 'N') ('d' / 'D')))> */
		nil,
		/* 7 for_stmt <- <(('f' / 'F') ('o' / 'O') ('r' / 'R') identifier (':' '=') expression (('t' / 'T') ('o' / 'O')) expression (('d' / 'D') ('o' / 'O')) statement* (('e' / 'E') ('n' / 'N') ('d' / 'D')))> */
		nil,
		/* 8 read_stmt <- <(('r' / 'R') ('e' / 'E') ('a' / 'A') ('d' / 'D') expression ';')> */
		nil,
		/* 9 write_stmt <- <(('w' / 'W') ('r' / 'R') ('i' / 'I') ('t' / 'T') ('e' / 'E') expression ';')> */
		nil,
		/* 10 expression <- <(primary / (unop expression) / e)> */
		func() bool {
			position185, tokenIndex185 := position, tokenIndex
			{
				position186 := position
				{
					position187, tokenIndex187 := position, tokenIndex
					{
						position189 := position
						{
							position190, tokenIndex190 := position, tokenIndex
							if !_rules[ruleidentifier]() {
								goto l191
							}
							goto l190
						l191:
							position, tokenIndex = position190, tokenIndex190
							{
								position193 := position
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l192
								}
								position++
							l194:
								{
									position195, tokenIndex195 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l195
									}
									position++
									goto l194
								l195:
									position, tokenIndex = position195, tokenIndex195
								}
								add(ruleintegerLiteral, position193)
							}
							goto l190
						l192:
							position, tokenIndex = position190, tokenIndex190
							{
								switch buffer[position] {
								case '(':
									if buffer[position] != rune('(') {
										goto l188
									}
									position++
									if !_rules[ruleexpression]() {
										goto l188
									}
									if buffer[position] != rune(')') {
										goto l188
									}
									position++
								case '\'':
									{
										position197 := position
										if buffer[position] != rune('\'') {
											goto l188
										}
										position++
										if !matchDot() {
											goto l188
										}
										if buffer[position] != rune('\'') {
											goto l188
										}
										position++
										add(ruleruneLiteral, position197)
									}
								case '"':
									{
										position198 := position
										if buffer[position] != rune('"') {
											goto l188
										}
										position++
									l199:
										{
											position200, tokenIndex200 := position, tokenIndex
											if !matchDot() {
												goto l200
											}
											goto l199
										l200:
											position, tokenIndex = position200, tokenIndex200
										}
										if buffer[position] != rune('"') {
											goto l188
										}
										position++
										add(rulestringLiteral, position198)
									}
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									{
										position201 := position
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l188
										}
										position++
									l202:
										{
											position203, tokenIndex203 := position, tokenIndex
											if c := buffer[position]; c < rune('0') || c > rune('9') {
												goto l203
											}
											position++
											goto l202
										l203:
											position, tokenIndex = position203, tokenIndex203
										}
										if buffer[position] != rune('.') {
											goto l188
										}
										position++
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l188
										}
										position++
									l204:
										{
											position205, tokenIndex205 := position, tokenIndex
											if c := buffer[position]; c < rune('0') || c > rune('9') {
												goto l205
											}
											position++
											goto l204
										l205:
											position, tokenIndex = position205, tokenIndex205
										}
										add(rulefloatLiteral, position201)
									}
								default:
									if !_rules[ruleidentifier]() {
										goto l188
									}
									if buffer[position] != rune('[') {
										goto l188
									}
									position++
									if !_rules[ruleexpression]() {
										goto l188
									}
									if buffer[position] != rune(']') {
										goto l188
									}
									position++
								}
							}

						}
					l190:
						add(ruleprimary, position189)
					}
					goto l187
				l188:
					position, tokenIndex = position187, tokenIndex187
					{
						position207 := position
						{
							switch buffer[position] {
							case '-':
								if buffer[position] != rune('-') {
									goto l206
								}
								position++
							case '+':
								if buffer[position] != rune('+') {
									goto l206
								}
								position++
							default:
								{
									position209 := position
									if buffer[position] != rune('!') {
										goto l206
									}
									position++
									add(rulenot, position209)
								}
							}
						}

						add(ruleunop, position207)
					}
					if !_rules[ruleexpression]() {
						goto l206
					}
					goto l187
				l206:
					position, tokenIndex = position187, tokenIndex187
					{
						position210 := position
						if !_rules[rulesp]() {
							goto l185
						}
						{
							position211 := position
							if !_rules[rulee1]() {
								goto l185
							}
						l212:
							{
								position213, tokenIndex213 := position, tokenIndex
								{
									position214 := position
									{
										position215, tokenIndex215 := position, tokenIndex
										if buffer[position] != rune('<') {
											goto l216
										}
										position++
										goto l215
									l216:
										position, tokenIndex = position215, tokenIndex215
										{
											switch buffer[position] {
											case '>':
												if buffer[position] != rune('>') {
													goto l213
												}
												position++
												if buffer[position] != rune('=') {
													goto l213
												}
												position++
											case '<':
												if buffer[position] != rune('<') {
													goto l213
												}
												position++
												if buffer[position] != rune('=') {
													goto l213
												}
												position++
											case '!':
												if buffer[position] != rune('!') {
													goto l213
												}
												position++
												if buffer[position] != rune('=') {
													goto l213
												}
												position++
											case '=':
												if buffer[position] != rune('=') {
													goto l213
												}
												position++
											case 'O', 'o':
												{
													position218, tokenIndex218 := position, tokenIndex
													if buffer[position] != rune('o') {
														goto l219
													}
													position++
													goto l218
												l219:
													position, tokenIndex = position218, tokenIndex218
													if buffer[position] != rune('O') {
														goto l213
													}
													position++
												}
											l218:
												{
													position220, tokenIndex220 := position, tokenIndex
													if buffer[position] != rune('r') {
														goto l221
													}
													position++
													goto l220
												l221:
													position, tokenIndex = position220, tokenIndex220
													if buffer[position] != rune('R') {
														goto l213
													}
													position++
												}
											l220:
												break
											default:
												{
													position222, tokenIndex222 := position, tokenIndex
													if buffer[position] != rune('a') {
														goto l223
													}
													position++
													goto l222
												l223:
													position, tokenIndex = position222, tokenIndex222
													if buffer[position] != rune('A') {
														goto l213
													}
													position++
												}
											l222:
												{
													position224, tokenIndex224 := position, tokenIndex
													if buffer[position] != rune('n') {
														goto l225
													}
													position++
													goto l224
												l225:
													position, tokenIndex = position224, tokenIndex224
													if buffer[position] != rune('N') {
														goto l213
													}
													position++
												}
											l224:
												{
													position226, tokenIndex226 := position, tokenIndex
													if buffer[position] != rune('d') {
														goto l227
													}
													position++
													goto l226
												l227:
													position, tokenIndex = position226, tokenIndex226
													if buffer[position] != rune('D') {
														goto l213
													}
													position++
												}
											l226:
												break
											}
										}

									}
								l215:
									add(rulebinop, position214)
								}
								if !_rules[rulee1]() {
									goto l213
								}
								goto l212
							l213:
								position, tokenIndex = position213, tokenIndex213
							}
							add(rulee0, position211)
						}
						add(rulee, position210)
					}
				}
			l187:
				add(ruleexpression, position186)
			}
			return true
		l185:
			position, tokenIndex = position185, tokenIndex185
			return false
		},
		/* 11 primary <- <(identifier / integerLiteral / ((&('(') ('(' expression ')')) | (&('\'') runeLiteral) | (&('"') stringLiteral) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') floatLiteral) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') (identifier '[' expression ']'))))> */
		nil,
		/* 12 identifier <- <(([a-z] / [A-Z])+ ((&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))*)> */
		func() bool {
			position229, tokenIndex229 := position, tokenIndex
			{
				position230 := position
				{
					position233, tokenIndex233 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l234
					}
					position++
					goto l233
				l234:
					position, tokenIndex = position233, tokenIndex233
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l229
					}
					position++
				}
			l233:
			l231:
				{
					position232, tokenIndex232 := position, tokenIndex
					{
						position235, tokenIndex235 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l236
						}
						position++
						goto l235
					l236:
						position, tokenIndex = position235, tokenIndex235
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l232
						}
						position++
					}
				l235:
					goto l231
				l232:
					position, tokenIndex = position232, tokenIndex232
				}
			l237:
				{
					position238, tokenIndex238 := position, tokenIndex
					{
						switch buffer[position] {
						case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l238
							}
							position++
						case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l238
							}
							position++
						default:
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l238
							}
							position++
						}
					}

					goto l237
				l238:
					position, tokenIndex = position238, tokenIndex238
				}
				add(ruleidentifier, position230)
			}
			return true
		l229:
			position, tokenIndex = position229, tokenIndex229
			return false
		},
		/* 13 integerLiteral <- <[0-9]+> */
		nil,
		/* 14 floatLiteral <- <([0-9]+ '.' [0-9]+)> */
		nil,
		/* 15 stringLiteral <- <('"' .* '"')> */
		nil,
		/* 16 runeLiteral <- <('\'' . '\'')> */
		nil,
		/* 17 unop <- <((&('-') '-') | (&('+') '+') | (&('!') not))> */
		nil,
		/* 18 not <- <'!'> */
		nil,
		/* 19 binop <- <('<' / ((&('>') ('>' '=')) | (&('<') ('<' '=')) | (&('!') ('!' '=')) | (&('=') '=') | (&('O' | 'o') (('o' / 'O') ('r' / 'R'))) | (&('A' | 'a') (('a' / 'A') ('n' / 'N') ('d' / 'D')))))> */
		nil,
		/* 20 e <- <(sp e0)> */
		nil,
		/* 21 e0 <- <(e1 (binop e1)*)> */
		nil,
		/* 22 e1 <- <(e2 (add e2 minus e2)*)> */
		func() bool {
			position249, tokenIndex249 := position, tokenIndex
			{
				position250 := position
				if !_rules[rulee2]() {
					goto l249
				}
			l251:
				{
					position252, tokenIndex252 := position, tokenIndex
					{
						position253 := position
						if buffer[position] != rune('+') {
							goto l252
						}
						position++
						if !_rules[rulesp]() {
							goto l252
						}
						add(ruleadd, position253)
					}
					if !_rules[rulee2]() {
						goto l252
					}
					if !_rules[ruleminus]() {
						goto l252
					}
					if !_rules[rulee2]() {
						goto l252
					}
					goto l251
				l252:
					position, tokenIndex = position252, tokenIndex252
				}
				add(rulee1, position250)
			}
			return true
		l249:
			position, tokenIndex = position249, tokenIndex249
			return false
		},
		/* 23 e2 <- <(e3 (multiply e3 divide e3 modulus e3)*)> */
		func() bool {
			position254, tokenIndex254 := position, tokenIndex
			{
				position255 := position
				if !_rules[rulee3]() {
					goto l254
				}
			l256:
				{
					position257, tokenIndex257 := position, tokenIndex
					{
						position258 := position
						if buffer[position] != rune('*') {
							goto l257
						}
						position++
						if !_rules[rulesp]() {
							goto l257
						}
						add(rulemultiply, position258)
					}
					if !_rules[rulee3]() {
						goto l257
					}
					{
						position259 := position
						if buffer[position] != rune('/') {
							goto l257
						}
						position++
						if !_rules[rulesp]() {
							goto l257
						}
						add(ruledivide, position259)
					}
					if !_rules[rulee3]() {
						goto l257
					}
					{
						position260 := position
						if buffer[position] != rune('%') {
							goto l257
						}
						position++
						if !_rules[rulesp]() {
							goto l257
						}
						add(rulemodulus, position260)
					}
					if !_rules[rulee3]() {
						goto l257
					}
					goto l256
				l257:
					position, tokenIndex = position257, tokenIndex257
				}
				add(rulee2, position255)
			}
			return true
		l254:
			position, tokenIndex = position254, tokenIndex254
			return false
		},
		/* 24 e3 <- <(e4 (exponentiation e4)*)> */
		func() bool {
			position261, tokenIndex261 := position, tokenIndex
			{
				position262 := position
				if !_rules[rulee4]() {
					goto l261
				}
			l263:
				{
					position264, tokenIndex264 := position, tokenIndex
					{
						position265 := position
						if buffer[position] != rune('^') {
							goto l264
						}
						position++
						if !_rules[rulesp]() {
							goto l264
						}
						add(ruleexponentiation, position265)
					}
					if !_rules[rulee4]() {
						goto l264
					}
					goto l263
				l264:
					position, tokenIndex = position264, tokenIndex264
				}
				add(rulee3, position262)
			}
			return true
		l261:
			position, tokenIndex = position261, tokenIndex261
			return false
		},
		/* 25 e4 <- <((minus value) / value)> */
		func() bool {
			position266, tokenIndex266 := position, tokenIndex
			{
				position267 := position
				{
					position268, tokenIndex268 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l269
					}
					if !_rules[rulevalue]() {
						goto l269
					}
					goto l268
				l269:
					position, tokenIndex = position268, tokenIndex268
					if !_rules[rulevalue]() {
						goto l266
					}
				}
			l268:
				add(rulee4, position267)
			}
			return true
		l266:
			position, tokenIndex = position266, tokenIndex266
			return false
		},
		/* 26 value <- <(number / sub)> */
		func() bool {
			position270, tokenIndex270 := position, tokenIndex
			{
				position271 := position
				{
					position272, tokenIndex272 := position, tokenIndex
					{
						position274 := position
						{
							position275 := position
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l273
							}
							position++
						l276:
							{
								position277, tokenIndex277 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l277
								}
								position++
								goto l276
							l277:
								position, tokenIndex = position277, tokenIndex277
							}
							begin := position275
							end := position
							text = string(buffer[begin:end])
						}
						if !_rules[rulesp]() {
							goto l273
						}
						add(rulenumber, position274)
					}
					goto l272
				l273:
					position, tokenIndex = position272, tokenIndex272
					{
						position278 := position
						{
							position279 := position
							if buffer[position] != rune('(') {
								goto l270
							}
							position++
							if !_rules[rulesp]() {
								goto l270
							}
							add(ruleopen, position279)
						}
						if !_rules[rulee1]() {
							goto l270
						}
						{
							position280 := position
							if buffer[position] != rune(')') {
								goto l270
							}
							position++
							if !_rules[rulesp]() {
								goto l270
							}
							add(ruleclose, position280)
						}
						add(rulesub, position278)
					}
				}
			l272:
				add(rulevalue, position271)
			}
			return true
		l270:
			position, tokenIndex = position270, tokenIndex270
			return false
		},
		/* 27 number <- <(<[0-9]+> sp)> */
		nil,
		/* 28 sub <- <(open e1 close)> */
		nil,
		/* 29 add <- <('+' sp)> */
		nil,
		/* 30 minus <- <('-' sp)> */
		func() bool {
			position284, tokenIndex284 := position, tokenIndex
			{
				position285 := position
				if buffer[position] != rune('-') {
					goto l284
				}
				position++
				if !_rules[rulesp]() {
					goto l284
				}
				add(ruleminus, position285)
			}
			return true
		l284:
			position, tokenIndex = position284, tokenIndex284
			return false
		},
		/* 31 multiply <- <('*' sp)> */
		nil,
		/* 32 divide <- <('/' sp)> */
		nil,
		/* 33 modulus <- <('%' sp)> */
		nil,
		/* 34 exponentiation <- <('^' sp)> */
		nil,
		/* 35 open <- <('(' sp)> */
		nil,
		/* 36 close <- <(')' sp)> */
		nil,
		/* 37 sp <- <(' ' / ('/' 't'))*> */
		func() bool {
			{
				position293 := position
			l294:
				{
					position295, tokenIndex295 := position, tokenIndex
					{
						position296, tokenIndex296 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l297
						}
						position++
						goto l296
					l297:
						position, tokenIndex = position296, tokenIndex296
						if buffer[position] != rune('/') {
							goto l295
						}
						position++
						if buffer[position] != rune('t') {
							goto l295
						}
						position++
					}
				l296:
					goto l294
				l295:
					position, tokenIndex = position295, tokenIndex295
				}
				add(rulesp, position293)
			}
			return true
		},
		nil,
	}
	p.rules = _rules
	return nil
}
