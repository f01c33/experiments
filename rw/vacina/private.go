// Code generated by go-bindata. DO NOT EDIT.
// sources:
// keys/private.key (3.247kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _keysPrivateKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x97\xa5\x12\xf4\x08\x02\x84\x7d\x9e\x62\xfd\xd4\x55\x98\xc4\x8a\x30\x33\xc7\x85\x27\x13\x66\x78\xfa\xab\x7f\xf7\xe4\xb5\x6d\xf7\x55\x8b\xfe\xfe\xf3\x27\xac\x20\x29\xe6\x5f\xae\xc7\xfc\x65\xbb\x4a\xc8\xf8\xc2\x5f\x9a\x90\xfc\xd3\x00\x86\xa2\xa8\x5a\xa3\xb0\x0c\xa3\x71\x4c\x23\x30\x67\xbb\x73\x76\x58\x75\x26\x38\xad\xc6\x93\x84\x4a\xa9\xc8\xe2\xdd\x5d\xd3\xf4\xe9\x3e\x76\x4d\x3e\x28\x9a\x75\xdd\x46\x65\xdf\xa8\x97\x90\xd0\x05\x1a\xcc\xb9\x27\xe2\x54\xaa\x2b\x03\x3d\x7c\xe8\x39\xb9\xca\x35\x46\x58\xfc\x83\xa3\x62\xfd\x23\x47\x6b\xe2\xba\x3a\x6d\x9a\xdc\xa2\x3a\x88\x3f\xd8\x5f\xa1\xb7\xd2\x8e\x41\xe0\xe5\x7b\x14\x4e\x07\xb0\x91\xaf\x62\x09\xd3\x64\x14\x49\x0d\x64\xba\xff\xb0\x6e\x3c\xf6\xf4\x99\x0d\x0c\x5b\x94\xc0\xbb\x1d\x0a\x39\xf3\x62\x0d\x86\x64\xd2\x7f\xbf\xd6\xb5\x5e\xbf\xf4\x34\xf5\x1b\x4c\x55\x57\x7e\x3a\x80\x0b\x59\xae\x30\xae\xa6\x0b\xed\x58\xc1\xed\xbd\x7a\x26\xd8\xfc\xa2\xc5\x4d\xf3\xae\xc7\x1f\x38\xa1\x30\x0a\x67\x15\xb2\xbc\xa6\x5f\xe8\xe9\x39\x2e\xf3\xc0\xe1\x28\x4c\x24\x81\xfd\x33\x86\x60\x00\x97\x54\x5e\xe1\x93\xad\xd5\x93\x30\xf1\xeb\xac\xee\x4c\xf0\x72\xc1\x96\x84\x29\x7d\xf8\x7a\x75\xb4\x06\x96\x98\xcb\xc8\xb0\x37\x5f\xf9\x85\xe7\x6a\x1a\xbb\xfb\xa9\xd5\x17\x1f\xba\x82\xc4\x4d\x40\x45\x3c\x08\xf3\x5f\xb8\x15\xd1\x67\xe9\xf2\x9c\x20\xfc\x94\x50\xe9\x6f\xd5\x15\x01\x49\x35\x7a\x9e\xe6\x42\xf6\x33\xf7\x0f\x7e\x2b\xeb\x74\x2b\xe4\xaf\xae\x4c\x3c\x75\x02\x63\x42\x46\xd4\x3c\x80\x91\xdf\x9e\x52\x3b\x27\x11\x06\xb5\xeb\x66\x12\xb7\x81\x6d\x70\x0d\x11\xf1\x0d\xc4\xaf\x27\xc8\xdb\xa9\xe7\xbe\xb7\x93\xf1\x80\xac\x8c\x90\x98\x4e\xff\xd3\x3e\xa9\x73\xad\x3c\x79\x42\x2e\x12\x00\xfb\xe5\x8e\xf0\xe7\xc5\xd8\x33\x7d\x02\xe4\x6d\x87\x56\xcb\x8e\x95\x9d\x15\x6a\xa7\xb0\x53\xd0\x9f\xc1\xeb\x6f\x22\x97\x05\x1a\xc5\x20\xc5\xdc\xdb\x56\xe7\xa9\xcf\x47\xbb\xab\x11\xeb\x9e\x53\x03\x8a\x5f\x2b\x69\x76\xdf\x29\x02\x33\xf6\xe4\x78\x68\x29\x63\xc9\xb8\x27\x47\x31\x38\xa8\x77\x46\x61\x02\x2e\x1b\x18\x16\xd3\xea\x4a\x99\xa6\x0d\x4d\x3c\x49\x44\x2e\x1f\x48\xb4\xd7\x93\xf1\x9d\x01\x8b\xd0\xcd\x6b\x4c\xdc\x50\xd1\x7b\xb8\x34\x24\x6a\x3d\x1b\xe0\xc3\xde\x4d\xee\xf9\x56\x9e\x77\x2b\xd3\x64\x9e\xd5\x49\x58\x8e\x31\x5f\x79\x24\x1e\xa2\x17\xb0\x91\x6a\x21\x65\x78\xbf\x3b\xc3\x00\xe3\x74\xd4\xfb\x5c\xf7\x5f\x0e\xde\xe5\xb1\x08\xf6\xed\xfd\xb4\x12\x26\xb7\xfe\x06\x6d\x1f\x93\x15\xc7\x00\xab\xae\x3d\x2d\x44\x88\x84\x91\x8f\x51\x8b\x20\x6f\x44\x82\x72\xc9\x14\xc7\x5c\x02\x03\x30\xce\xbf\x13\xde\xf6\xe9\x69\x83\x5f\x28\x3b\xee\x07\x5c\x0d\x37\x3b\x32\x2e\x9e\x27\x31\x31\xf0\x36\xb5\x87\x9d\x28\x8f\x05\x5f\x30\x18\x59\x2f\x6f\xcf\xe6\xfc\xd0\xe6\x65\xf0\xfb\x1e\x20\xde\x22\x08\x1c\x7e\xa0\xae\xf6\x29\x5f\x77\x8e\xee\x46\xc9\x69\xfc\x93\xe5\x41\xd0\x2f\xed\x44\x2e\x4d\x74\xad\xed\x7d\x2f\x97\x9d\xe1\x61\x4c\xd7\xb1\x95\x6e\xf0\x81\xc3\x15\x55\x5d\xc9\x02\xd0\xf4\xa4\x3b\xa2\x95\xde\x41\x2a\x7c\xe5\xd2\xe2\xa2\xab\x4a\xd0\xc6\x68\x39\xb3\xc6\xf0\xd3\xa3\x0b\x03\xfb\x3a\xdf\x06\xed\xaf\x47\x11\xcb\x4e\x8b\xfc\xde\x8f\xb4\xb2\x86\x7f\xf3\x06\xa6\x28\x30\xef\xb9\x12\x3f\xdc\x15\x29\x05\x03\x2f\xa8\xe9\x49\x17\x58\x29\x41\x7e\x1c\x17\xaa\xf4\xac\xa5\xda\x25\x2e\x52\x41\x80\x51\x39\x39\x65\xd4\x29\x0d\xa8\x09\x07\xdf\x6a\xe0\x53\x29\x4c\x1d\x1a\x40\x79\x45\xa7\xb1\x0b\x76\x03\x68\xcb\x7c\x21\x95\x6c\x05\x11\xda\x35\x94\xcc\xf0\xde\xd6\x33\xca\xd8\xbe\x76\xa3\x32\x3e\x73\x3f\xc0\x0e\x64\xc5\x20\x7e\x52\x9f\xd2\x1b\xcf\x2d\x17\x5f\xba\x05\x90\xa8\x58\x52\x3e\xf0\xea\xdb\xfd\x09\x91\x5a\xcc\x5d\x17\x71\xbb\x22\xc0\x89\x1d\x4f\x2f\x65\xc8\xbf\xfb\x46\x93\xfb\x1b\x8e\x84\xdc\xa7\xa3\xe8\xd1\x47\x54\x49\xcb\x9e\x3c\xbf\xdb\x1e\xdf\x04\x58\xa1\xf4\xad\x7f\x0d\xef\x06\x66\xeb\x6c\x29\xe8\x33\x59\x52\x06\x4b\xd3\x5b\x19\x93\x12\x64\x7a\x3a\xd5\xda\x29\x60\xc9\x52\x89\x86\x45\xac\xda\x6b\xc1\x8f\x90\xfc\x6d\xbc\x2c\xf3\x6a\x43\x0b\x58\xb0\x86\x13\xcc\x93\x11\xc4\x8d\x64\x2b\x93\xe4\x7b\xeb\xfa\xad\xa3\x12\xe9\xd0\xb4\x56\x36\xde\x8d\xb1\x09\xbe\x1c\x48\x2b\x74\x6b\x78\x2e\x66\x86\x9d\x7a\x96\x2d\xb1\xa3\xfc\xce\xee\xfd\x03\x78\x8c\xf7\xe2\x32\xdf\x8d\x4a\x93\x4a\xd3\x15\x3a\x8f\xa3\xba\xef\xb2\x6e\x7c\xc4\x79\xa4\x0a\xbf\x94\x19\x1f\x6d\x2a\x3c\x78\x2a\x04\x8c\xce\x8e\xe4\x27\x11\xbd\x58\x43\x6d\xd1\xbf\xcc\xd0\x04\x36\xf5\xac\x76\x70\xa5\x5c\x81\x53\xed\x2f\x01\x6d\xe0\x94\x74\xc1\x0d\xf3\x8f\x02\x52\xa1\x24\x3a\xd7\x40\x15\x26\x01\x53\xfd\xfc\xf8\x2e\xae\xfd\xb2\x71\x08\xeb\x64\x79\xdb\x87\x1f\x1a\x72\x01\xa8\x33\xf2\x91\x47\x10\x4d\xd8\x6a\x8f\x9c\xcd\x34\xde\xd3\x2b\x6e\x3e\x74\xa4\x4b\x34\x9d\x91\x13\x1a\x95\xf2\xb0\xb7\x4e\x84\x7e\x7e\x1b\x79\x04\x6d\xc7\x35\x8d\xc0\x32\x96\xc3\x84\x21\x29\x00\x13\xf2\x22\x14\xba\xb0\x75\x3b\x74\x71\x36\x85\x33\x6a\x40\xab\x3e\xc2\x0a\x32\x4c\x6e\xc6\xba\x76\xae\x19\x65\xb6\x3b\x66\x69\x51\x09\xb1\xbc\x84\x41\x05\xf5\xfa\xa9\x1b\x51\x65\x39\xb7\x70\x80\xd6\x58\xdd\x5c\x44\x26\x85\x5e\x76\xc9\xf5\x55\x2e\x6f\x1a\x8d\x8c\xe5\x9a\x71\x48\xe2\x31\x10\x89\xf6\x68\x5f\xfe\x26\xce\x54\xd1\x01\xb8\x32\x0e\xdf\xfc\xd2\x79\x24\xe1\xaf\x85\xfa\x61\x4e\x03\x07\xb7\x8b\x4b\x6a\xe2\x6b\xb4\xc8\x97\xbd\x2c\x96\x6d\xd0\x43\xfb\x49\xed\xcd\xe2\xec\x29\x79\x64\x94\x58\x2c\xc8\x70\xbe\xef\xbe\x5b\x52\x5f\x0e\x85\xd8\xa8\x71\x2c\xbe\x0c\x49\x71\x9f\xbb\x04\x6c\xfd\xb1\x12\x64\xbe\x67\x73\x3c\xe9\x71\x80\xfd\x33\x48\x4a\x04\xbb\x15\x1c\x5c\x7c\x70\x3c\xce\x07\xcf\xcf\x17\xb5\xe0\x72\x4e\xa6\x38\xe1\xf6\x7e\xf6\x9b\xd1\x95\x6d\xfa\x4a\x66\x69\xcf\x80\x48\xf7\xe8\x1a\xcb\xb1\x26\xff\xfd\x5e\xb9\x52\x94\x3b\xf8\xe4\xc3\x9c\xe5\x54\xb2\xc0\xfc\xbd\xe1\x33\xdb\x11\x72\x49\xfc\xa8\x0c\x77\x5e\xdd\xdb\x04\x06\x6f\x73\x2d\x6f\x70\x1e\x9c\x79\x8e\x02\x34\x7a\xba\x52\x6b\xf0\xee\xc4\x3b\xb0\xd9\xf8\x97\xb0\x19\x89\x3d\x8e\x33\x0e\xed\x4b\x57\xb4\x53\x73\x7c\x24\xe1\x47\x76\xba\x38\xb4\xfc\xd3\xdb\x18\xf5\x6d\xb9\xde\x89\xf4\xb5\x87\x01\x7d\x48\x79\x23\x92\x34\xff\x2d\x9f\x0f\x99\xb3\x8b\xbb\x8c\x72\xdb\xcf\x4a\xc7\x64\xda\x9b\x1c\x3f\x47\x6a\x98\xed\xb4\x4c\xeb\xd7\x6a\x25\x17\x2a\x1a\xb7\x19\x92\xae\x39\x92\x79\x40\x51\xde\x01\xe6\x8b\x93\x83\x67\x22\x2d\x89\xa1\x5b\xd2\x9d\x35\xeb\x58\x41\xef\xf0\x9c\x83\x46\x3d\xcf\xb5\x10\x5d\x50\x9e\xd5\x7e\xe6\xe2\xd7\x80\x74\xc6\x80\xa1\x90\xdd\x06\x68\x2b\x2a\xf8\x24\x5f\x27\x00\xb8\x11\x69\x8e\x6e\x8c\x49\x25\xbb\x63\x8a\x32\x8d\xa5\x09\xb3\x24\xd8\x9e\x24\x1e\xdc\x54\xc5\xce\xe2\xd8\xb0\xda\xc5\x08\xca\x0a\x9a\x4a\xd0\xc6\x9c\x2d\x69\x4c\x8b\x30\xa4\x4f\xc6\xcf\x64\x00\xb3\x97\x8a\x67\xd0\xc3\x76\x00\xd9\x37\x9b\x26\x5e\x61\xd1\x57\xc4\x57\x7c\x57\xb4\xfe\xc7\x21\x4a\xe3\x22\x49\xf5\x3e\x6a\x2f\x0f\x25\xd5\xea\xd6\x50\x7b\x43\xbc\xa5\x16\x97\xf0\xaa\x42\xef\x00\x2f\xe8\x95\x11\xb9\x5e\x4b\x96\xb0\xad\xe5\xe0\xc8\x66\xcc\xb2\x19\xc8\xda\x1b\x71\xba\x11\xa2\x6b\x2b\xf0\xd9\x0d\xbb\xa6\x0a\xfe\x07\xb8\x33\x3b\xbe\x09\xdf\x3d\xb7\xb9\x92\x4e\x00\x05\xed\x42\x75\x41\xdb\x07\xf5\xf2\x62\x3b\x4b\xc9\x29\x2b\x48\x1c\x8b\x33\x8e\xb2\xb7\x56\x91\x0f\x51\x0a\x1b\x14\x5c\xa8\x6e\x20\x9f\x6c\x93\xe8\xe7\x8e\xb9\x24\x75\xbb\xa0\x79\xb7\xe9\xfa\x00\x13\x6c\x6e\xc5\xa8\x94\x9a\x33\x48\xe9\x9e\x60\x97\x28\x9e\x5d\x78\x49\x9c\xf9\x5c\x42\xbc\xc8\x08\x8c\xab\x88\x93\xd7\xc7\x66\x20\x97\xf8\xcd\x75\xcb\xa2\xe4\x13\x3f\x57\x4a\xf5\x14\x6f\x5f\x00\x5d\x37\x48\x3c\x0e\xa8\x80\x2e\x8c\x8e\x9d\x28\x03\x9a\x98\xb0\x16\x41\xae\x69\xc3\x61\x15\xce\xd5\x42\x6b\xb0\x57\x9a\x1c\x86\x8f\x44\xde\x0c\x46\x08\xf5\xc9\x4f\xe0\x50\x5f\x83\x6a\x73\x28\xe0\x61\x7a\x75\xed\x02\x3f\xa2\xc2\x6d\x83\x63\x73\xae\x55\x5c\x63\xe2\xdb\x0b\xac\xf6\x61\xc9\x54\x7d\x85\x4e\x7b\xa4\x5f\x88\x28\x9a\xd4\x76\x82\x02\x09\xc7\x28\x35\xc7\xca\x83\x90\xbc\x4b\x33\xc0\xb6\xd1\xfb\x85\x43\x1d\xdd\x26\xaa\x3b\xfd\xa6\xc6\x1c\x8f\x2d\x13\xac\x6e\x70\x2a\xa9\x66\x23\x0e\x68\x12\xba\x8c\x5b\xfa\x04\x53\x12\x3b\xa6\x2a\x05\x72\x94\x4a\xbf\xad\xb0\x62\x6f\x9e\x66\xe0\xce\x8e\x64\x29\xa0\x3f\x84\x19\xe1\x80\xd4\x4a\x72\x51\x74\x2d\xfd\x80\xf0\xde\xab\x8f\xd5\x9f\x24\xb1\xc1\x13\x71\x0f\xbb\x2d\xe8\x0a\x49\x39\x5c\x15\xcc\xa2\xaa\x31\x1e\xe4\xf2\xb0\xc1\x00\x2b\x3a\xef\x9b\x4c\x0f\xce\xe8\x83\xa2\x58\x9a\xbc\xa4\xaf\xc6\x86\x96\x25\x5a\x63\x4b\x6d\x51\x80\x29\x4d\xa9\x47\xbe\x41\x2d\x67\x06\xa9\x82\x6c\x5c\x13\x14\xe7\xa7\xb0\x48\x20\xc8\x21\x18\xf0\xbc\x04\xf7\x75\xca\xb9\xbc\x87\x2f\xa6\xa8\x58\x5c\x2f\x9d\x5c\x7f\x98\x27\x4e\xe0\x9a\xb7\x5d\x94\x15\xcb\x0a\xf4\x27\xf0\x75\xbf\x26\x86\xf3\xa5\x33\xc2\x9f\xd4\xfa\xea\xc3\x4e\xef\x44\xdd\x01\xf4\xaf\x9c\x66\x82\x6b\x91\x32\x80\xb8\x9f\xfe\x13\x6b\x57\xb1\xa5\xef\x9c\xf4\xa2\x3e\xd5\xbc\x4a\x3a\x85\x0d\xb1\xd6\x0d\xc9\xd0\x7b\x71\x19\xbb\x53\x15\x65\xdb\xd2\x0a\x16\x30\xb2\xae\xdd\x01\x0c\xbb\x21\x93\x71\x91\x13\x6b\x46\x48\xdd\x0b\x95\x4e\xb5\xfd\x1e\x98\x77\xaf\x2d\x38\x6c\xff\x30\x2c\x10\x6b\xd6\x08\xe7\xde\xd6\xf0\x5b\x8f\x83\x9d\xb3\xdb\x9c\x65\x97\x84\xd5\x19\xd7\x28\x06\x7e\x3f\xff\x7e\x9d\x74\x60\xf4\xae\x39\x7a\xa5\x14\x9c\xef\x49\xae\xa4\x74\x5c\x36\xc6\x5e\xea\x30\xff\xf9\x0f\x8e\xc0\x5c\x3f\xd3\xb1\xc5\x6b\x8b\xc8\x43\x40\x8d\x25\x0a\x3d\x44\x67\xa5\xf4\x00\x3e\x75\xf8\x71\x16\x5f\xec\x8d\xaf\x74\x0f\xe6\x29\x7d\x15\x02\xde\x15\x41\x43\x12\xaf\x0a\x4b\xbb\xca\x89\xf1\xdd\x18\x43\x3d\x38\xc7\x0d\xdf\x22\xe9\x3e\xe1\x41\xdc\x98\xf4\x61\xa1\x89\x5e\x1a\x00\x86\x84\x90\xef\x04\x98\x4b\x47\x2a\xe2\x7f\x4a\x37\xac\xd5\x13\x57\xde\xc1\x60\xbb\xf3\x65\x70\xd4\x6c\xb7\xbd\x2f\x33\x6d\xd4\x0c\x49\x55\x2c\x2b\x36\x2b\x77\xdd\x5e\x21\x8f\x7d\x10\x6e\x76\x00\x31\x9c\x3b\x3b\xe3\x62\x68\xd1\x67\x2d\xeb\xd8\x53\x49\x5d\xdf\x33\xc1\x64\xc6\xdb\xb4\x82\xf5\x2e\x64\x95\x58\x9d\xe6\xfd\x95\x04\xf8\xa3\xcb\x49\xb5\x7a\x43\xde\x74\xb7\x53\x18\xed\xde\x48\xa0\x77\xde\x72\x48\x5a\xc2\x43\x08\x73\xd9\x1f\xeb\x2d\x39\x3f\x5e\x11\x1d\xac\xfd\xf7\xf9\xf1\x61\x2c\x5a\xf1\x65\x5a\x10\x36\x9d\x6a\x81\xa5\xe3\x3e\x04\xc1\x7a\x5f\x66\x2c\x49\xac\xe3\x65\x2f\x40\x88\x41\x64\x5a\xd1\xab\x37\x7c\x4a\x36\xa5\x4e\x6d\xdc\xda\x1e\x65\xfa\x2e\xf1\x11\xe2\x9a\x4c\xdf\x53\x6f\x8b\x04\x57\x56\x4f\x83\xa2\x8c\x71\xe6\x77\x9a\x61\x2f\xa8\xa8\xb7\xea\x31\x7f\xff\x0d\xfc\xa3\x1d\x82\xc9\xff\x7f\x1d\xf9\x6f\x00\x00\x00\xff\xff\x06\xd2\x2d\xbe\xaf\x0c\x00\x00")

func keysPrivateKeyBytes() ([]byte, error) {
	return bindataRead(
		_keysPrivateKey,
		"keys/private.key",
	)
}

func keysPrivateKey() (*asset, error) {
	bytes, err := keysPrivateKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/private.key", size: 3247, mode: os.FileMode(0666), modTime: time.Unix(1568851326, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0x75, 0x4a, 0xb8, 0xc, 0x9b, 0xdd, 0x5f, 0xea, 0xfc, 0x92, 0xeb, 0x18, 0xcb, 0x17, 0xc1, 0x6d, 0xe6, 0x26, 0xfc, 0x98, 0xa8, 0x5, 0xa8, 0xf6, 0xba, 0xdb, 0xdd, 0xbc, 0xe5, 0x4c, 0x89}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"keys/private.key": keysPrivateKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"keys": &bintree{nil, map[string]*bintree{
		"private.key": &bintree{keysPrivateKey, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
